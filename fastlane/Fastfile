# More documentation about how to customize your build
# can be found here:
# https://docs.fastlane.tools
fastlane_version "1.109.0"

import '../config/Fastfile'

before_all do
	
end

platform :ios do
	lane :test do
		update_cartfile_with_clent_commit_hash_if_workflow_triggered_by_client
		sh("cd ..; xcodebuild -resolvePackageDependencies")
		scan(
			scheme: "InstantSearchCore-iOS",
			configuration: "Debug",
			clean: true,
			xcargs: prepare_api_keys
		)
		# code_coverage #commented this xcov not fixed for the new XCode for now. 
		run_swift_lint
	end
end

platform :mac do
	lane :test do
		update_cartfile_with_clent_commit_hash_if_workflow_triggered_by_client
		sh("cd ..; xcodebuild -resolvePackageDependencies")
		scan(
			scheme: "InstantSearchCore-macOS",
			configuration: "Debug",
			clean: true,
			xcargs: prepare_api_keys
		)
	end
end

platform :tv do
	lane :test do
		update_cartfile_with_clent_commit_hash_if_workflow_triggered_by_client
		sh("cd ..; xcodebuild -resolvePackageDependencies")
		scan(
			scheme: "InstantSearchCore-tvOS",
			configuration: "Debug",
			clean: true,
			xcargs: prepare_api_keys
		)
	end
end

desc "Available options: type:major|minor|patch"
lane :deploy do |options|
	branch = options[:branch] || "master"
	prepare_git('master')
	pod_lib_lint(verbose: true)
	increment_version_number(
  		bump_type: options[:type]
	)
	new_build_number = version_bump_podspec(
		bump_type: options[:type],
		path: "InstantSearchCore.podspec"
	)

	branchName = "version-#{new_build_number}"
	sh("git checkout -b #{branchName}")

	#puts changelog_from_git_commits
	git_commit(
		path: ["InstantSearchCore.podspec", "Sources/Info.plist" ,"Tests/Info.plist"], 
		message: "Version #{new_build_number}"
	)
	add_git_tag(
		build_number: new_build_number,
		tag: new_build_number
	)
	push_to_git_remote(remote: "origin")

	create_pull_request(
		# api_token: "secret",      # optional, defaults to ENV["GITHUB_API_TOKEN"]
		repo: "algolia/instantsearch-core-swift",
		title: "Deploying new #{options[:type]} version #{new_build_number}",
		head: "#{branchName}",       # optional, defaults to current branch name
		base: "master", # optional, defaults to "master"
		body: "Please check the files before merging in case I've overidden something accidentally.",       # optional
		# api_url: "http://yourdomain/api/v3" # optional, for GitHub Enterprise, defaults to "https://api.github.com"
	)

	pod_push(
		path: "InstantSearchCore.podspec"
	)

end

def update_cartfile_with_clent_commit_hash_if_workflow_triggered_by_client()
	if !ENV['GIT_DEPENDENT_COMMIT_HASH'].to_s.empty?
		if !ENV['GIT_DEPENDENT_PULL_REQUEST_REPOSITORY_URL'].to_s.empty?
			File.write("../Cartfile", "git \"#{ENV["GIT_DEPENDENT_PULL_REQUEST_REPOSITORY_URL"]}\" \"#{ENV["GIT_DEPENDENT_COMMIT_HASH"]}\"")
			puts "Changed Cartfile to refer to #{ENV["GIT_DEPENDENT_PULL_REQUEST_REPOSITORY_URL"]} with commit #{ENV["GIT_DEPENDENT_COMMIT_HASH"]}"
		else
			File.write("../Cartfile", "github \"algolia/algoliasearch-client-swift\" \"#{ENV["GIT_DEPENDENT_COMMIT_HASH"]}\"")
			puts "Changed Cartfile to refer to algolia/algoliasearch-client-swift with commit #{ENV["GIT_DEPENDENT_COMMIT_HASH"]}"
		end
	else 
		puts "No specific dependencies to test, proceeding with latest release of dependent library"
	end
end

desc "bump minor version"
lane :version_minor_bump do
	# version_bump_podspec(
	# 	bump_type: "minor",
	# 	path: "InstantSearchCore.podspec"
	# )
	increment_version_number(
		bump_type: "minor"
	)
end

desc "Upgrade Swift Version in .swift-version"
# Force cocoapods to compile with 'swift-version'
lane :upgrade_swift do |options|
	version = options[:version]
	sh("echo #{version} > ../.swift-version")
	puts "\e[31m\e[5mDon't forget to update the swift version in the dependecies: .podspecs & cartfile'\e[0m"
end

def prepare_git(branch)
	if !ENV['BITRISE_BUILD_NUMBER'] # ensure git clean locally but not on Bitrise.
		ensure_git_status_clean
	end

	# ensure_git_branch(branch:branch)
	masterHash = sh("git rev-parse origin/#{branch}")
	headHash = sh("git rev-parse HEAD")
	
	if masterHash != headHash 
		raise "Error: Master and Head Hashes do not match, meaning that we are probably not on Master and therefore can't deploy"
	end

	# checkout master to be able to push tag there.
	sh("git checkout #{branch}")
	
	# We already pull in bitrise before doing anything, so no need for this step anymore.
	# git_pull
end

lane :code_coverage do
	# NOTE: You must have ran scan before being able to generate the code coverage

  xcov(
		project: "InstantSearchCore.xcodeproj",
		scheme: "InstantSearchCore-iOS",
		output_directory: "build/xcov_output",
		slack_url: ENV['SLACK_WEBHOOK'],
		slack_channel: "#notif-deploy-mobile",
		slack_message: "InstantSearchCore code coverage report",
		include_targets: "InstantSearchCore.framework"
		#only_project_targets: true # trying to exclude pods, but not working, it s excluding everything
	)
end 

after_all do
  #slack
end

def prepare_api_keys()
	xcargs = []  
	api_key = ENV["ALGOLIA_API_KEY"]
	if api_key
		xcargs << %Q[ALGOLIA_API_KEY="#{api_key}"]
	end
	
	api_id = ENV["ALGOLIA_APPLICATION_ID"]
	if api_id
		xcargs << %Q[ALGOLIA_APPLICATION_ID="#{api_id}"]
	end

	bitrise_build_number = ENV["BITRISE_BUILD_NUMBER"]
	if bitrise_build_number
		xcargs << %Q[BITRISE_BUILD_NUMBER="#{bitrise_build_number}"]
	end

	return xcargs.join(" ")
end
